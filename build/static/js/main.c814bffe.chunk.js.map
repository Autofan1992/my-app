{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Dialogs/Dialogs.module.css","components/Navbar/Friends/Friends.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Header/Header.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Navbar/Navbar.module.css","reportWebVitals.js","redux/profile-reducer.js","redux/dialogs-reducer.js","redux/sidebar-reducer.js","redux/todoList-reducer.js","redux/redux-store.js","components/Header/Header.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/ProfileInfo/ProfileInfoContainer.jsx","components/Profile/Profile.jsx","components/Settings/Settings.jsx","components/Music/Music.jsx","components/News/News.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","components/Navbar/Friends/FriendItem/FriendItem.jsx","components/Navbar/Friends/Friends.jsx","components/Navbar/Friends/FriendsContainer.jsx","components/Navbar/Navbar.jsx","components/ToDoList/ToDo.jsx","components/ToDoList/ToDoList.jsx","components/ToDoList/ToDoListContainer.jsx","App.js","index.js"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","UPDATE_NEW_POST_TEXT","UPDATE_PROFILE_NAME","UPDATE_PROFILE_BIRTH_DATE","UPDATE_PROFILE_CITY","UPDATE_PROFILE_EDUCATION","UPDATE_PROFILE_WEBSITE","initialState","posts","id","message","likesCount","newPostText","profileInfo","name","birthDate","city","education","website","toggleButtonText","profileReducer","state","action","type","newText","ADD_MESSAGE","UPDATE_NEW_MESSAGE_TEXT","dialogs","messages","newMessageText","dialogsReducer","friends","sidebarReducer","ADD_TODO","DELETE_TODO","DELETE_ALL_COMPLETE_TODO","TOGGLE_ALL_TODO","UPDATE_TODO_TEXT","UPDATE_TODO_STATUS","FILTER_TODO","todos","filter","toggleAllComplete","todoListReducer","length","shortid","text","complete","map","todo","status","reducers","combineReducers","profilePage","dialogsPage","sidebar","todoList","store","createStore","window","Header","className","s","header","src","alt","Post","props","postItem","MyPosts","postsElements","p","myPosts","minTitle","newPost","onChange","e","target","value","updateNewPostText","placeholder","onClick","addPost","MyPostsContainer","connect","dispatch","updateNewPostTextActionCreator","ProfileInfo","onInputValueUpdate","el","inputName","updateInputValue","changeValue","input","parentElement","querySelector","elObject","innerText","thumbImg","href","logo","authorInfo","avatar","blockItem","infoList","ProfileInfoContainer","updateProfileName","updateProfileBirthDate","updateProfileCity","updateProfileEducation","updateProfileWebsite","Profile","Settings","Music","News","DialogItem","path","dialogItem","to","activeClassName","activeDialog","Message","messageBlock","Dialogs","dialogsElements","d","messagesElements","m","dsRow","content","onMessageChange","addNewMessage","DialogsContainer","updateNewMessageTextActionCreator","FriendItem","friendItem","Friends","friendsElements","index","friendsBlock","friendsItems","FriendsContainer","Navbar","navMenu","item","active","changeBgColor","ToDo","handleComplete","checked","completeToggle","htmlFor","handleDelete","ToDoList","handleSubmit","preventDefault","addTodo","deleteTodo","handleToggle","updateTodoStatus","handleFilter","filterTodos","todosLeft","someCompleteTodos","some","someTodos","toDoElements","t","newTodoText","onSubmit","updateTodoText","toggleAllTodo","deleteAllCompleteTodo","ToDoListContainer","deleteTodoActionCreator","updateTodoStatusActionCreator","filterText","filterTodoActionCreator","App","pageWrapper","React","createRef","useState","bgColor","setColor","useEffect","current","style","backgroundColor","ref","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c814bffe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumbImg\":\"ProfileInfo_thumbImg__zqCn5\",\"authorInfo\":\"ProfileInfo_authorInfo__14zt5\",\"avatar\":\"ProfileInfo_avatar__17lSR\",\"blockItem\":\"ProfileInfo_blockItem__s97Gj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dsRow\":\"Dialogs_dsRow__3dnjz\",\"sidebar\":\"Dialogs_sidebar__3r7-J\",\"minTitle\":\"Dialogs_minTitle__QOq8o\",\"dialogs\":\"Dialogs_dialogs__lwUGb\",\"dialogItem\":\"Dialogs_dialogItem__3fm-8\",\"activeDialog\":\"Dialogs_activeDialog__s1PHm\",\"content\":\"Dialogs_content__3IhRu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friendsBlock\":\"Friends_friendsBlock__34jUp\",\"friendsItems\":\"Friends_friendsItems__2vfcE\",\"friendItem\":\"Friends_friendItem__2-t5j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3W1s-\",\"newPost\":\"MyPosts_newPost__3HLoP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__29f13\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postItem\":\"Post_postItem__14sa_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"thumbImg\":\"Profile_thumbImg__kLFQv\",\"authorInfo\":\"Profile_authorInfo__Fs7pF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navMenu\":\"Navbar_navMenu__3F-68\",\"item\":\"Navbar_item__1KwaU\",\"active\":\"Navbar_active__3v3ba\"};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const ADD_POST = 'addPost';\r\nconst UPDATE_NEW_POST_TEXT = 'updateNewPostText';\r\n\r\nconst UPDATE_PROFILE_NAME = 'updateProfileName';\r\nconst UPDATE_PROFILE_BIRTH_DATE = 'updateProfileBirthDate';\r\nconst UPDATE_PROFILE_CITY = 'updateProfileCity';\r\nconst UPDATE_PROFILE_EDUCATION = 'updateProfileEducation';\r\nconst UPDATE_PROFILE_WEBSITE = 'updateProfileWebsite';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {\r\n            id: 1,\r\n            message: 'Hi, how are you?',\r\n            likesCount: 12\r\n        },\r\n        {\r\n            id: 2,\r\n            message: 'It\\'s my first post',\r\n            likesCount: 1\r\n        },\r\n    ],\r\n    newPostText: '',\r\n    profileInfo: {\r\n        name: 'Mykola',\r\n        birthDate: '16.12.1992',\r\n        city: 'Kamyanets-Podilskiy',\r\n        education: 'React Developer',\r\n        website: 'skoda-club.ua',\r\n        toggleButtonText: 'изменить',\r\n    },\r\n}\r\n\r\nconst profileReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                newPostText: '',\r\n                posts: [...state.posts, {\r\n                    id: 3,\r\n                    message: state.newPostText,\r\n                    likesCount: 0\r\n                }]\r\n            }\r\n\r\n        case UPDATE_NEW_POST_TEXT:\r\n            return {\r\n                ...state,\r\n                newPostText: action.newText\r\n            }\r\n\r\n        case UPDATE_PROFILE_NAME:\r\n            return {\r\n                ...state,\r\n                profileInfo: {\r\n                    ...state.profileInfo,\r\n                    name: action.newText\r\n                }\r\n            }\r\n\r\n        case UPDATE_PROFILE_BIRTH_DATE:\r\n            return {\r\n                ...state,\r\n                profileInfo: {\r\n                    ...state.profileInfo,\r\n                    birthDate: action.newText\r\n                }\r\n            }\r\n\r\n        case UPDATE_PROFILE_CITY:\r\n            return {\r\n                ...state,\r\n                profileInfo: {\r\n                    ...state.profileInfo,\r\n                    city: action.newText\r\n                }\r\n            }\r\n\r\n        case UPDATE_PROFILE_EDUCATION:\r\n            return {\r\n                ...state,\r\n                profileInfo: {\r\n                    ...state.profileInfo,\r\n                    education: action.newText\r\n                }\r\n            }\r\n\r\n        case UPDATE_PROFILE_WEBSITE:\r\n            return {\r\n                ...state,\r\n                profileInfo: {\r\n                    ...state.profileInfo,\r\n                    website: action.newText\r\n                }\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostActionCreator = () => ({\r\n    type: ADD_POST,\r\n});\r\nexport const updateNewPostTextActionCreator = (text) => ({\r\n    type: UPDATE_NEW_POST_TEXT,\r\n    newText: text\r\n});\r\n\r\nexport const updateProfileName = (text) => ({\r\n    type: UPDATE_PROFILE_NAME,\r\n    newText: text\r\n});\r\nexport const updateProfileBirthDate = (text) => ({\r\n    type: UPDATE_PROFILE_BIRTH_DATE,\r\n    newText: text\r\n});\r\nexport const updateProfileCity = (text) => ({\r\n    type: UPDATE_PROFILE_CITY,\r\n    newText: text\r\n});\r\nexport const updateProfileEducation = (text) => ({\r\n    type: UPDATE_PROFILE_EDUCATION,\r\n    newText: text\r\n});\r\nexport const updateProfileWebsite = (text) => ({\r\n    type: UPDATE_PROFILE_WEBSITE,\r\n    newText: text\r\n});\r\n\r\nexport default profileReducer;","const ADD_MESSAGE = 'addMessage';\r\nconst UPDATE_NEW_MESSAGE_TEXT = 'updateNewMessageText';\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {\r\n            id: 1,\r\n            name: 'Nick'\r\n        },\r\n        {\r\n            id: 2,\r\n            name: 'Dimych'\r\n        },\r\n    ],\r\n    messages: [\r\n        {\r\n            id: 1,\r\n            message: 'Hi'},\r\n        {\r\n            id: 2,\r\n            message: 'How is your react ?'\r\n        },\r\n    ],\r\n    newMessageText: '',\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 3, message: state.newMessageText}],\r\n                newMessageText: ''\r\n            };\r\n\r\n        case UPDATE_NEW_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                newMessageText: action.newText\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addMessageActionCreator = () => ({\r\n    type: ADD_MESSAGE,\r\n});\r\nexport const updateNewMessageTextActionCreator = (text) => ({\r\n    type: UPDATE_NEW_MESSAGE_TEXT,\r\n    newText: text\r\n});\r\n\r\nexport default dialogsReducer;","let initialState = {\r\n    friends: [\r\n        {name: 'Dimych'},\r\n        {name: 'Pupkin'},\r\n    ]\r\n}\r\n\r\nconst sidebarReducer = (state = initialState, action) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;","import * as shortid from \"shortid\";\r\n\r\nconst ADD_TODO = 'addTodo';\r\nconst DELETE_TODO = 'deleteTodo';\r\nconst DELETE_ALL_COMPLETE_TODO = 'deleteAllCompleteTodo';\r\nconst TOGGLE_ALL_TODO = 'toggleAllTodo';\r\nconst UPDATE_TODO_TEXT = 'updateTodoText';\r\nconst UPDATE_TODO_STATUS = 'updateTodoStatus';\r\nconst FILTER_TODO = 'filterTodo';\r\n\r\nlet initialState = {\r\n    todos: [],\r\n    newText: '',\r\n    filter: 'all',\r\n    toggleAllComplete: true\r\n}\r\n\r\nconst todoListReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            if (state.newText.length > 2) {\r\n                return {\r\n                    ...state,\r\n                    newText: '',\r\n                    todos: [{id: shortid.generate(), text: state.newText, complete: false}, ...state.todos],\r\n                };\r\n            }\r\n            return state\r\n\r\n        case UPDATE_TODO_TEXT:\r\n            return {\r\n                ...state,\r\n                newText: action.newText\r\n            };\r\n\r\n        case UPDATE_TODO_STATUS:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos].map((todo) => {\r\n                    if (todo.id === action.id) {\r\n                        return {\r\n                            ...todo,\r\n                            complete: !todo.complete\r\n                        }\r\n                    } else {\r\n                        return todo\r\n                    }\r\n                })\r\n            }\r\n\r\n        case FILTER_TODO:\r\n            return {\r\n                ...state,\r\n                filter: action.status\r\n            }\r\n\r\n        case DELETE_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => todo.id !== action.id),\r\n            }\r\n\r\n        case DELETE_ALL_COMPLETE_TODO:\r\n            return {\r\n                ...state,\r\n                todos: state.todos.filter(todo => !todo.complete),\r\n            }\r\n\r\n        case TOGGLE_ALL_TODO:\r\n            return {\r\n                ...state,\r\n                toggleAllComplete: !state.toggleAllComplete,\r\n                todos: [...state.todos].map((todo) => {\r\n                    return {\r\n                        ...todo,\r\n                        complete: state.toggleAllComplete\r\n                    }\r\n                })\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addTodoActionCreator = () => ({\r\n    type: ADD_TODO\r\n});\r\n\r\nexport const deleteAllCompleteTodoActionCreator = () => ({\r\n    type: DELETE_ALL_COMPLETE_TODO\r\n});\r\n\r\nexport const toggleAllTodoActionCreator = () => ({\r\n    type: TOGGLE_ALL_TODO\r\n});\r\n\r\nexport const deleteTodoActionCreator = (id) => ({\r\n    type: DELETE_TODO,\r\n    id: id\r\n});\r\n\r\nexport const updateTodoTextActionCreator = (todoText) => ({\r\n    type: UPDATE_TODO_TEXT,\r\n    newText: todoText\r\n});\r\n\r\nexport const updateTodoStatusActionCreator = (id) => ({\r\n    type: UPDATE_TODO_STATUS,\r\n    id: id\r\n});\r\n\r\nexport const filterTodoActionCreator = (filterText) => ({\r\n    type: FILTER_TODO,\r\n    status: filterText\r\n});\r\n\r\nexport default todoListReducer;","import {combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport todoListReducer from \"./todoList-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    todoList: todoListReducer,\r\n});\r\n\r\nlet store = createStore(reducers);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport s from './Header.module.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://www.vectorlogo.zone/logos/ampproject/ampproject-icon.svg\" alt=\"\"/>\r\n        </header>\r\n    );\r\n}\r\nexport default Header;","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.postItem}>\r\n            <img\r\n                src=\"https://vignette.wikia.nocookie.net/james-camerons-avatar/images/4/4c/%D0%9D%D0%B5%D0%B9%D1%82%D0%B8%D1%80%D0%B8._%D0%98%D0%BD%D1%84%D0%BE%D0%B1%D0%BE%D0%BA%D1%81.jpg/revision/latest/scale-to-width-down/340?cb=20180213033424&path-prefix=ru\"\r\n                alt=\"\"/>\r\n            <div>{props.message}</div>\r\n            <div>{props.likesCount}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\n\r\nconst MyPosts = (props) => {\r\n    let postsElements = props.posts\r\n        .map((p) => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostText = props.newPostText;\r\n\r\n    let onAddPost = () => {\r\n        props.addPost();\r\n    }\r\n    let onPostChange = (e) => {\r\n        let text = e.target.value;\r\n        props.updateNewPostText(text);\r\n    }\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <h2 className={\"minTitle \" + s.minTitle}>My posts</h2>\r\n            <div className={s.newPost}>\r\n                <div>\r\n                    <textarea\r\n                        onChange={onPostChange}\r\n                        value={newPostText}\r\n                        placeholder=\"Начинайте писать пост\"\r\n                    />\r\n                </div>\r\n                <button onClick={onAddPost}>Add Post</button>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n/*const oldMyPostsContainer = () => {\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    const state = store.getState().profilePage;\r\n\r\n                    let addPost = () => {\r\n                        store.dispatch(addPostActionCreator());\r\n                    }\r\n                    let onPostChange = (text) => {\r\n                        let action = updateNewPostTextActionCreator(text);\r\n                        store.dispatch(action);\r\n                    }\r\n\r\n                    return <MyPosts\r\n                        updateNewPostText={onPostChange}\r\n                        addPost={addPost}\r\n                        state={state}\r\n                    />\r\n                }\r\n            }\r\n        </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPostActionCreator());\r\n        },\r\n        updateNewPostText: (text) => {\r\n            dispatch(updateNewPostTextActionCreator(text))\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\nconst ProfileInfo = (props) => {\r\n    let state = props.profileInfo;\r\n\r\n    let onInputValueUpdate = (el) => {\r\n        let text = el.target.value,\r\n            inputName = el.target.name;\r\n\r\n            props.updateInputValue(text, inputName);\r\n    }\r\n\r\n    let changeValue = (el) => {\r\n        let inputParent = el.target.parentElement,\r\n            input = inputParent.querySelector('input'),\r\n            elObject = el.target;\r\n\r\n        if (input.className !== 'input edit') {\r\n            input.className = 'input edit';\r\n            elObject.innerText = 'сохранить';\r\n        } else {\r\n            input.className = 'input';\r\n            elObject.innerText = 'изменить';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileInfo}>\r\n            <div className={s.thumbImg}>\r\n                <a href=\"#s\" className={s.logo}>\r\n                    <img src=\"https://miro.medium.com/max/1000/0*wZAcNrIWFFjuJA78\" alt=\"\"/>\r\n                </a>\r\n            </div>\r\n            <div className={s.authorInfo}>\r\n                <div className={s.avatar}>\r\n                    <img src=\"https://miro.medium.com/max/1000/0*wZAcNrIWFFjuJA78\" alt=\"\"/>\r\n                </div>\r\n                <div className=\"infoBlock\">\r\n                    <div className={s.blockItem}>\r\n                        <input type=\"text\" className=\"input\" name=\"name\" onChange={onInputValueUpdate}\r\n                               value={state.name}/>\r\n                        <button className=\"edit\" onClick={changeValue} type=\"button\">изменить</button>\r\n                    </div>\r\n                    <div className={s.infoList}>\r\n                        <div className={s.blockItem}>\r\n                            <input type=\"text\" className=\"input\" name=\"birthDate\" onChange={onInputValueUpdate}\r\n                                   value={state.birthDate}/>\r\n                            <button className=\"edit\" onClick={changeValue} type=\"button\">изменить</button>\r\n                        </div>\r\n                        <div className={s.blockItem}>\r\n                            <input type=\"text\" className=\"input\" name=\"city\" onChange={onInputValueUpdate}\r\n                                   value={state.city}/>\r\n                            <button className=\"edit\" onClick={changeValue} type=\"button\">изменить</button>\r\n                        </div>\r\n                        <div className={s.blockItem}>\r\n                            <input type=\"text\" className=\"input\" name=\"education\" onChange={onInputValueUpdate}\r\n                                   value={state.education}/>\r\n                            <button className=\"edit\" onClick={changeValue} type=\"button\">изменить</button>\r\n                        </div>\r\n                        <div className={s.blockItem}>\r\n                            <input type=\"text\" className=\"input\" name=\"website\" onChange={onInputValueUpdate}\r\n                                   value={state.website}/>\r\n                            <button className=\"edit\" onClick={changeValue} type=\"button\">изменить</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ProfileInfo;","import React from 'react';\r\nimport {\r\n    updateProfileBirthDate,\r\n    updateProfileCity,\r\n    updateProfileEducation,\r\n    updateProfileName, updateProfileWebsite\r\n} from \"../../../redux/profile-reducer\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport {connect} from \"react-redux\";\r\n\r\n/*const oldProfileInfoContainer = () => {\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    let state = store.getState().profilePage.profileInfo;\r\n\r\n                    let updateInputValue = (text, inputName) => {\r\n                        switch (inputName) {\r\n                            case 'name':\r\n                                store.dispatch(updateProfileName(text))\r\n                                break\r\n                            case 'birthDate':\r\n                                store.dispatch(updateProfileBirthDate(text))\r\n                                break\r\n                            case 'city':\r\n                                store.dispatch(updateProfileCity(text))\r\n                                break\r\n                            case 'education':\r\n                                store.dispatch(updateProfileEducation(text))\r\n                                break\r\n                            case 'website':\r\n                                store.dispatch(updateProfileWebsite(text))\r\n                                break\r\n                            default:\r\n                                return\r\n                        }\r\n                    }\r\n                    return <ProfileInfo updateInputValue={updateInputValue} state={state}/>\r\n                }\r\n                \r\n            }\r\n        </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profileInfo: state.profilePage.profileInfo\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateInputValue: (text, inputName) => {\r\n            switch (inputName) {\r\n                case 'name':\r\n                    dispatch(updateProfileName(text))\r\n                    break\r\n                case 'birthDate':\r\n                    dispatch(updateProfileBirthDate(text))\r\n                    break\r\n                case 'city':\r\n                    dispatch(updateProfileCity(text))\r\n                    break\r\n                case 'education':\r\n                    dispatch(updateProfileEducation(text))\r\n                    break\r\n                case 'website':\r\n                    dispatch(updateProfileWebsite(text))\r\n                    break\r\n                default:\r\n                    return\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst ProfileInfoContainer = connect(mapStateToProps, mapDispatchToProps) (ProfileInfo);\r\n\r\nexport default ProfileInfoContainer;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfoContainer from \"./ProfileInfo/ProfileInfoContainer\";\r\n\r\nconst Profile = () => {\r\n    return (\r\n        <div className=\"profileBlock\">\r\n            <ProfileInfoContainer/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\nexport default Profile;","import React from 'react';\r\nimport s from './Settings.module.css';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n      <h2>Settings</h2>\r\n    );\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './Music.module.css';\r\n\r\nconst Music = (props) => {\r\n    return (\r\n      <h2>Music</h2>\r\n    );\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './News.module.css';\r\n\r\nconst News = (props) => {\r\n    return (\r\n      <h2>News</h2>\r\n    );\r\n}\r\n\r\nexport default News;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialogItem}>\r\n            <NavLink to={path} activeClassName={s.activeDialog}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.messageBlock}>\r\n            {props.message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n    let newMessageText = state.newMessageText;\r\n\r\n    let dialogsElements = state.dialogs\r\n        .map((d) =>\r\n            <DialogItem key={d.id} name={d.name} id={d.id}/>);\r\n\r\n    let messagesElements = state.messages\r\n        .map((m) =>\r\n            <Message key={m.id} message={m.message} id={m.id}/>);\r\n\r\n    let onMessageAdd = () => {\r\n        props.addNewMessage()\r\n    };\r\n\r\n    let onMessageChange = (e) => {\r\n        let text = e.target.value;\r\n        props.onMessageChange(text)\r\n    };\r\n\r\n    return (\r\n        <div className={s.dsRow}>\r\n            <div className={s.sidebar}>\r\n                <h2 className={\"minTitle \" + s.minTitle}>DIALOGS</h2>\r\n                <div className={s.dialogs}>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n            <div className={s.content}>\r\n                {messagesElements}\r\n                <div className=\"addMessage\">\r\n                    <textarea\r\n                        onChange={onMessageChange}\r\n                        value={newMessageText}\r\n                        placeholder=\"Введите ваше сообщение\"\r\n                    />\r\n                    <button onClick={onMessageAdd}>Add Message</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessageActionCreator, updateNewMessageTextActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n/*const OldDialogsContainer = () => {\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    const state = store.getState().dialogsPage;\r\n\r\n                    let addNewMessage = () => {\r\n                        store.dispatch(addMessageActionCreator());\r\n                    };\r\n\r\n                    let onMessageChange = (text) => {\r\n                        let action = updateNewMessageTextActionCreator(text);\r\n                        store.dispatch(action);\r\n                    };\r\n                    return <Dialogs\r\n                        addNewMessage={addNewMessage}\r\n                        onMessageChange={onMessageChange}\r\n                        state={state}\r\n                    />\r\n                }\r\n            }\r\n        </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addNewMessage: () => {\r\n            dispatch(addMessageActionCreator());\r\n        },\r\n        onMessageChange: (text) => {\r\n            dispatch(updateNewMessageTextActionCreator(text));\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps) (Dialogs);\r\n\r\nexport default DialogsContainer;\r\n","import React from 'react';\r\nimport s from './../Friends.module.css';\r\n\r\nconst FriendItem = (props) => {\r\n    return (\r\n        <div className={s.friendItem}>\r\n            <p>{props.name}</p>\r\n        </div>\r\n    );\r\n}\r\nexport default FriendItem;","import React from 'react';\r\nimport s from './Friends.module.css';\r\nimport FriendItem from \"./FriendItem/FriendItem\";\r\n\r\nconst Friends = (props) => {\r\n    let friendsElements = props.friends\r\n        .map((p, index) => <FriendItem key={index} name={p.name}/>);\r\n\r\n    return (\r\n        <div className={s.friendsBlock}>\r\n            <p>Friends</p>\r\n            <div className={s.friendsItems}>\r\n                {friendsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Friends;","import React from 'react';\r\nimport s from './Friends.module.css';\r\nimport {connect} from \"react-redux\";\r\nimport Friends from \"./Friends\";\r\n\r\n/*const oldFriendsContainer = (props) => {\r\n    return (\r\n        <StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    const state = store.getState().sidebar;\r\n                }\r\n            }\r\n\r\n        </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        friends: state.sidebar.friends\r\n    }\r\n}\r\nlet mapDispatchToProps = () => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\n\r\nconst FriendsContainer = connect(mapStateToProps, mapDispatchToProps) (Friends);\r\n\r\nexport default FriendsContainer;","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FriendsContainer from \"./Friends/FriendsContainer\";\r\n\r\nconst Navbar = (props) => {\r\n    let handleColorChange = (el) => {\r\n        props.changeBgColor(el.target.value)\r\n    }\r\n    return (\r\n        <nav className={s.navMenu}>\r\n            <NavLink to=\"/profile\" className={s.item} activeClassName={s.active}>Profile</NavLink>\r\n            <NavLink to=\"/dialogs\" className={s.item} activeClassName={s.active}>Messages</NavLink>\r\n            <NavLink to=\"/news\" className={s.item} activeClassName={s.active}>News</NavLink>\r\n            <NavLink to=\"/music\" className={s.item} activeClassName={s.active}>Music</NavLink>\r\n            <NavLink to=\"/settings\" className={s.item} activeClassName={s.active}>Settings</NavLink>\r\n            <NavLink to=\"/todolist\" className={s.item} activeClassName={s.active}>todolist</NavLink>\r\n            <FriendsContainer/>\r\n            <div className=\"bgColorInput\">\r\n                <p>Change app background</p>\r\n                <input type=\"color\" onChange={handleColorChange}/>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst ToDo = (props) => {\r\n    return (\r\n        <div className=\"toDoBlock\">\r\n            <input type=\"checkbox\" name=\"toDo\" id={props.id} onChange={props.handleComplete} checked={props.completeToggle}/>\r\n            <label htmlFor={props.id} className={`${props.completeToggle}`}>{props.text}</label>\r\n            <button onClick={props.handleDelete} id={props.id}>&times;</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from \"./ToDo\";\r\n\r\nconst ToDoList = (props) => {\r\n\r\n    let handleSubmit = e => {\r\n        e.preventDefault();\r\n        props.addTodo();\r\n    }\r\n\r\n    let handleDelete = (e) => {\r\n        props.deleteTodo(e.target.id);\r\n    }\r\n\r\n    let deleteAllComplete = () => {\r\n        props.deleteAllCompleteTodo()\r\n    }\r\n\r\n    let toggleAll = () => {\r\n        props.toggleAllTodo()\r\n    }\r\n\r\n    let handleToggle = (e) => {\r\n        props.updateTodoStatus(e.target.id);\r\n    }\r\n\r\n    let handleChange = e => {\r\n        props.updateTodoText(e.target.value);\r\n    }\r\n\r\n    let handleFilter = e => {\r\n        props.filterTodos(e.target.value);\r\n    }\r\n\r\n    let todos = [];\r\n\r\n    if (props.filter === 'all') {\r\n        todos = props.todos\r\n    } else if (props.filter === 'active') {\r\n        todos = props.todos.filter(todo => !todo.complete)\r\n    } else if (props.filter === 'complete') {\r\n        todos = props.todos.filter(todo => todo.complete)\r\n    }\r\n\r\n    let todosLeft = props.todos.filter(todo => !todo.complete).length\r\n\r\n    let someCompleteTodos = props.todos.some(todo => todo.complete)\r\n\r\n    let someTodos = props.todos.some(todo => todo)\r\n\r\n    let toDoElements = todos\r\n        .map(t => <ToDo key={t.id} id={t.id} text={t.text}\r\n                        completeToggle={t.complete}\r\n                        handleComplete={handleToggle}\r\n                        handleDelete={handleDelete}\r\n        />)\r\n\r\n    let newTodoText = props.newText;\r\n\r\n    return (\r\n        <div className=\"ToDoWrapper\">\r\n            <form action=\"\" onSubmit={handleSubmit}>\r\n                <div className=\"inputBlock\">\r\n                    <input type=\"text\" name=\"todoAdd\" value={newTodoText} onChange={handleChange}/>\r\n                    <button onClick={handleSubmit}>add todo</button>\r\n                </div>\r\n            </form>\r\n            {toDoElements}\r\n            <p className=\"todosLeft\">Todos Left: {todosLeft}</p>\r\n            <div className=\"filterButtons\">\r\n                <button onClick={handleFilter} value=\"all\"> Show all</button>\r\n                <button onClick={handleFilter} value=\"active\">Show active</button>\r\n                <button onClick={handleFilter} value=\"complete\">Show complete</button>\r\n            </div>\r\n            <div>\r\n                {someTodos ? <button onClick={toggleAll}>toggle all todos {`${props.toggleAllComplete}`}</button> : ''}\r\n            </div>\r\n            <div>\r\n                {someCompleteTodos ? <button onClick={deleteAllComplete}>delete all complete todos</button> : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import ToDoList from \"./ToDoList\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addTodoActionCreator,\r\n    deleteAllCompleteTodoActionCreator,\r\n    deleteTodoActionCreator,\r\n    filterTodoActionCreator,\r\n    toggleAllTodoActionCreator,\r\n    updateTodoStatusActionCreator,\r\n    updateTodoTextActionCreator\r\n} from \"../../redux/todoList-reducer\";\r\n\r\nlet mapStateToProps = (state) => {\r\n   return {\r\n       todoList: state.todoList,\r\n       newText: state.todoList.newText,\r\n       todos: state.todoList.todos,\r\n       filter: state.todoList.filter,\r\n       toggleAllComplete: state.todoList.toggleAllComplete\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addTodo: () => {\r\n            dispatch(addTodoActionCreator())\r\n        },\r\n        deleteAllCompleteTodo: () => {\r\n            dispatch(deleteAllCompleteTodoActionCreator())\r\n        },\r\n        toggleAllTodo: () => {\r\n            dispatch(toggleAllTodoActionCreator())\r\n        },\r\n        deleteTodo: (id) => {\r\n            dispatch(deleteTodoActionCreator(id))\r\n        },\r\n        updateTodoText: (text) => {\r\n            dispatch(updateTodoTextActionCreator(text))\r\n        },\r\n        updateTodoStatus: (id) => {\r\n            dispatch(updateTodoStatusActionCreator(id))\r\n        },\r\n        filterTodos: (filterText) => {\r\n            dispatch(filterTodoActionCreator(filterText))\r\n        }\r\n    }\r\n}\r\n\r\nconst ToDoListContainer = connect(mapStateToProps, mapDispatchToProps) (ToDoList);\r\n\r\nexport default ToDoListContainer;","import './App.css';\nimport React, {useEffect, useState} from 'react';\nimport {Route} from \"react-router-dom\";\nimport Header from \"./components/Header/Header\";\nimport Profile from \"./components/Profile/Profile\";\nimport Settings from \"./components/Settings/Settings\";\nimport Music from \"./components/Music/Music\";\nimport News from \"./components/News/News\";\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport ToDoListContainer from \"./components/ToDoList/ToDoListContainer\";\n\nconst App = () => {\n    let pageWrapper = React.createRef();\n    let [bgColor, setColor] = useState('#14151a');\n\n    useEffect(() => {\n        pageWrapper.current.style.backgroundColor = bgColor\n    });\n\n    return (\n        <main className=\"pageWrapper\" ref={pageWrapper}>\n            <div className=\"container\">\n                <div className=\"appWrapper\">\n                    <Header/>\n                    <Navbar changeBgColor={setColor}/>\n                    <div className=\"appContent\">\n                        <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                        <Route path=\"/profile\" render={() => <Profile/>}/>\n                        <Route path=\"/news\" render={() => <News/>}/>\n                        <Route path=\"/music\" render={() => <Music/>}/>\n                        <Route path=\"/settings\" render={() => <Settings/>}/>\n                        <Route path=\"/todolist\" render={() => <ToDoListContainer/>}/>\n                    </div>\n                </div>\n            </div>\n        </main>\n    );\n}\n\nexport default App;","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>, document.getElementById('root')\n);\n\n/*rerenderEntireTree();*/\n\n/*store.subscribe(() => {\n    rerenderEntireTree()\n});*/\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}